import WrapperOptions, { MongooseModelRead, WrapperOptionsInput } from './wrapperOptions';
import { ObjectsKeys } from './helpers';
export declare type mwFindById<T, U> = (id: string, options?: WrapperFindByIdOptions<T, U>) => Promise<void> | void;
export declare type postFindById<T, U = T> = (result: U | null, id: string, options?: WrapperFindByIdOptions<T, U>) => Promise<void>;
export interface WrapperFindByIdOptionsInput<T, U = T> extends WrapperOptionsInput<T> {
    options?: {
        exclude?: ObjectsKeys<T>[];
        populateFields?: ObjectsKeys<T>[];
        middleware?: {
            findById?: Array<mwFindById<T, U>>;
        };
        postProcessing?: Array<postFindById<T, U>>;
    };
    mongooseModel?: MongooseModelRead;
}
export default class WrapperFindByIdOptions<T, U = T> extends WrapperOptions<T> {
    options: {
        exclude: ObjectsKeys<T>[];
        populateFields: ObjectsKeys<T>[];
        middleware: {
            findById: Array<mwFindById<T, U>>;
        };
        postProcessing: Array<postFindById<T, U>>;
    };
    mongooseModel: MongooseModelRead;
    constructor(input: WrapperFindByIdOptionsInput<T, U>);
}
