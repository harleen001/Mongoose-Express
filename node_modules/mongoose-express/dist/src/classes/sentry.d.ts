import { Transaction, Span, TransactionContext, TransactionMetadata, Primitive, SpanContext } from '@sentry/types';
export declare type Tags = SpanContext['tags'];
export declare class FakeTransaction implements Transaction {
    data: {
        [key: string]: any;
    };
    spanId: string;
    traceId: string;
    startTimestamp: number;
    tags: {
        [key: string]: Primitive;
    };
    metadata: TransactionMetadata;
    name: string;
    trimEnd?: boolean | undefined;
    parentSampled?: boolean | undefined;
    description?: string | undefined;
    op?: string | undefined;
    status?: string | undefined;
    parentSpanId?: string | undefined;
    sampled?: boolean | undefined;
    endTimestamp?: number | undefined;
    transaction?: Transaction | undefined;
    constructor();
    setName(): void;
    toContext(): TransactionContext;
    updateWithContext(): this;
    finish(): void;
    setTag(): this;
    setData(): this;
    setStatus(): this;
    setHttpStatus(): this;
    child(): Span;
    startChild(): Span;
    isSuccess(): boolean;
    toTraceparent(): string;
    getTraceContext(): {
        data?: {
            [key: string]: any;
        } | undefined;
        description?: string | undefined;
        op?: string | undefined;
        parent_span_id?: string | undefined;
        span_id: string;
        status?: string | undefined;
        tags?: {
            [key: string]: Primitive;
        } | undefined;
        trace_id: string;
    };
    toJSON(): {
        data?: {
            [key: string]: any;
        } | undefined;
        description?: string | undefined;
        op?: string | undefined;
        parent_span_id?: string | undefined;
        span_id: string;
        start_timestamp: number;
        status?: string | undefined;
        tags?: {
            [key: string]: Primitive;
        } | undefined;
        timestamp?: number | undefined;
        trace_id: string;
    };
}
export declare type TransactionLike = Transaction | Span | FakeTransaction;
