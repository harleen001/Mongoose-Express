"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Sentry = __importStar(require("@sentry/node"));
class Config {
    constructor(env = process.env, sentry = Sentry) {
        this._env = env;
        this.sentry = Sentry;
    }
    updateEnv(env = process.env) {
        this._env = env;
    }
    getMandatoryEnvVar(varName) {
        if (!this._env[varName]) {
            const err = new Error(`Environment variable ${varName} is missing but mandatory`);
            this.sentry.captureException(err);
            throw err;
        }
        else {
            return this._env[varName];
        }
    }
}
exports.default = Config;
//# sourceMappingURL=config%20copy.js.map