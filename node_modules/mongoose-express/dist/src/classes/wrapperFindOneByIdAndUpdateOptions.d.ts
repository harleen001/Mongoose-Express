import WrapperOptions, { MongooseModelRead, WrapperOptionsInput } from './wrapperOptions';
import { ObjectsKeys } from './helpers';
import { UpdateQuery } from './queries';
export declare type mwFindByIdAndUpdate<T, U = T> = (id: string, item: UpdateQuery<T>, options?: WrapperUpdateOptions<T, U>) => Promise<void> | void;
export declare type postFindByIdAndUpdate<T, U = T> = (updated: U, options?: WrapperUpdateOptions<T, U>) => Promise<void> | void;
export interface WrapperUpdateOptionsInput<T, U = T> extends WrapperOptionsInput<T> {
    options?: {
        initialItem?: UpdateQuery<T>;
        exclude?: ObjectsKeys<T>[];
        updateFields?: ObjectsKeys<T>[];
        populateFields?: ObjectsKeys<T>[];
        middleware?: {
            findByIdAndUpdate?: Array<mwFindByIdAndUpdate<T, U>>;
        };
        postProcessing?: Array<postFindByIdAndUpdate<T, U>>;
    };
    mongooseModel?: MongooseModelRead;
}
export default class WrapperUpdateOptions<T, U = T> extends WrapperOptions<T> {
    options: {
        initialItem: UpdateQuery<T>;
        exclude: ObjectsKeys<T>[];
        populateFields: ObjectsKeys<T>[];
        updateFields?: ObjectsKeys<T>[];
        middleware: {
            findByIdAndUpdate: Array<mwFindByIdAndUpdate<T, U>>;
        };
        postProcessing: Array<postFindByIdAndUpdate<T, U>>;
    };
    mongooseModel: MongooseModelRead;
    constructor(input: WrapperUpdateOptionsInput<T, U>);
}
