import { QuerySelector } from '../classes/queries';
import { ObjectsKeys } from './helpers';
import WrapperOptions, { MongooseModelRead, WrapperOptionsInput } from './wrapperOptions';
export declare type mwFind<T, U = T> = (query: QuerySelector<T>, options?: WrapperFindOptions<T, U>) => Promise<void>;
export declare type postFind<T, U = T> = (results: U[], query: QuerySelector<T>, options?: WrapperFindOptions<any, any, T, U>) => Promise<void>;
export interface WrapperFindOptionsInput<T, U = T, V = U, W = V> extends WrapperOptionsInput<T> {
    options?: {
        initialQuery?: QuerySelector<T>;
        populateFields?: ObjectsKeys<T>[];
        sort?: Partial<Record<ObjectsKeys<T>, number>>;
        skip?: number;
        limit?: number;
        exclude?: Array<Extract<keyof T, string>>;
        paramsForQuery?: Array<Extract<keyof T, string>>;
        middleware?: {
            find?: Array<mwFind<T, U>>;
        };
        postProcessing?: Array<postFind<V, W>>;
    };
    mongooseModel?: MongooseModelRead;
}
export default class WrapperFindOptions<T, U = T, V = U, W = V> extends WrapperOptions<T> {
    options: {
        initialQuery: QuerySelector<T>;
        populateFields: ObjectsKeys<T>[];
        sort?: Partial<Record<ObjectsKeys<T>, number>>;
        skip?: number;
        limit?: number;
        exclude: Array<Extract<keyof T, string>>;
        paramsForQuery: Array<Extract<keyof T, string>>;
        middleware: {
            find: Array<mwFind<T, U>>;
        };
        postProcessing: Array<postFind<V, W>>;
    };
    mongooseModel: MongooseModelRead;
    constructor(input: WrapperFindOptionsInput<T, U, V, W>);
}
