import WrapperOptions, { MongooseModelCreate, WrapperOptionsInput } from './wrapperOptions';
import { ObjectsKeys } from './helpers';
export declare type mwCreate<T, U = T> = (item: U, options?: WrapperCreateOptions<T, U>) => Promise<void> | void;
export declare type postCreate<T, U = T> = (created: U, options?: WrapperCreateOptions<T, U>) => Promise<void>;
export interface WrapperCreateOptionsInput<T, U = T> extends WrapperOptionsInput<T> {
    options?: {
        returnCreatedObject?: boolean;
        populateFields?: ObjectsKeys<T>[];
        sort?: Partial<Record<ObjectsKeys<T>, number>>;
        skip?: number;
        limit?: number;
        middleware?: {
            create?: Array<mwCreate<T, U>>;
        };
        postProcessing?: Array<postCreate<T, U>>;
    };
    mongooseModel?: MongooseModelCreate;
}
export default class WrapperCreateOptions<T, U = T> extends WrapperOptions<T> {
    options: {
        returnCreatedObject: boolean;
        populateFields: ObjectsKeys<T>[];
        sort?: Partial<Record<ObjectsKeys<T>, number>>;
        skip?: number;
        limit?: number;
        middleware: {
            create: Array<mwCreate<T, U>>;
        };
        postProcessing: Array<postCreate<T, U>>;
    };
    mongooseModel: MongooseModelCreate;
    constructor(input: WrapperCreateOptionsInput<T, U>);
}
