"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const merge_anything_1 = require("merge-anything");
const wrapperFindOneByIdAndUpdateOptions_1 = __importDefault(require("../../classes/wrapperFindOneByIdAndUpdateOptions"));
const service__default_helpers_runAllMiddleware_1 = __importDefault(require("./service._default.helpers.runAllMiddleware"));
const getTransaction_1 = __importDefault(require("../sentry/getTransaction"));
const Sentry = __importStar(require("@sentry/node"));
exports.default = (model, options = {}, existingTransaction) => async (id, item) => {
    const transaction = (0, getTransaction_1.default)({
        name: 'service._default.findByIdAndUpdate',
        op: 'service.run',
        description: 'service._default.findByIdAndUpdate'
    }, existingTransaction);
    const opts = new wrapperFindOneByIdAndUpdateOptions_1.default(options);
    item = (0, merge_anything_1.merge)(item, opts.options.initialItem);
    if (opts.options.updateFields) {
        const newItem = {};
        for (const field of opts.options.updateFields) {
            newItem[field] = item[field];
        }
        item = newItem;
    }
    try {
        await service__default_helpers_runAllMiddleware_1.default.findByIdAndUpdate(id, item, opts, transaction);
        const doc = model.findByIdAndUpdate(id, item, opts.mongooseModel);
        opts.options.exclude.forEach((exclude) => doc.select(`-${exclude}`));
        opts.options.populateFields.forEach(field => doc.populate(field));
        const spanUpdateItem = (0, getTransaction_1.default)({
            name: 'service._default.findByIdAndUpdate.updateItem',
            op: 'doc.exec',
            data: {}
        }, transaction);
        const updatedItem = await doc.exec();
        spanUpdateItem.finish();
        return updatedItem
            ? updatedItem.toObject()
            : null;
    }
    catch (err) {
        Sentry.captureException(err);
        throw err;
    }
    finally {
        transaction.finish();
    }
};
//# sourceMappingURL=service._default.findByIdAndUpdate.js.map