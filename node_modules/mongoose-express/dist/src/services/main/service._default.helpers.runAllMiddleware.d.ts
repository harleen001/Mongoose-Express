import { TransactionLike } from '../../classes/sentry';
import { QuerySelector, UpdateQuery } from '../../classes/queries';
import WrapperCreateOptions from '../../classes/wrapperCreateOptions';
import WrapperFindByIdOptions from '../../classes/wrapperFindByIdOptions';
import WrapperUpdateOptions from '../../classes/wrapperFindOneByIdAndUpdateOptions';
import WrapperFindOptions from '../../classes/wrapperFindOptions';
declare const find: <T, U = T>(query: QuerySelector<T>, options: WrapperFindOptions<T, U, U, U>, existingTransaction?: TransactionLike | undefined) => Promise<void>;
declare const findById: <T, U = T>(id: string, options: WrapperFindByIdOptions<T, U>, existingTransaction?: TransactionLike | undefined) => Promise<void>;
declare const findByIdAndUpdate: <T, U = T>(id: string, item: UpdateQuery<T>, options: WrapperUpdateOptions<T, U>, existingTransaction?: TransactionLike | undefined) => Promise<void>;
declare const create: <T, U = T>(item: U, options: WrapperCreateOptions<T, U>, existingTransaction?: TransactionLike | undefined) => Promise<void>;
export { find, findById, findByIdAndUpdate, create };
declare const _default: {
    find: <T, U = T>(query: QuerySelector<T>, options: WrapperFindOptions<T, U, U, U>, existingTransaction?: TransactionLike | undefined) => Promise<void>;
    findById: <T_1, U_1 = T_1>(id: string, options: WrapperFindByIdOptions<T_1, U_1>, existingTransaction?: TransactionLike | undefined) => Promise<void>;
    findByIdAndUpdate: <T_2, U_2 = T_2>(id: string, item: UpdateQuery<T_2>, options: WrapperUpdateOptions<T_2, U_2>, existingTransaction?: TransactionLike | undefined) => Promise<void>;
    create: <T_3, U_3 = T_3>(item: U_3, options: WrapperCreateOptions<T_3, U_3>, existingTransaction?: TransactionLike | undefined) => Promise<void>;
};
export default _default;
