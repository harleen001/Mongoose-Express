"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.findByIdAndUpdate = exports.findById = exports.find = void 0;
const getTransaction_1 = __importDefault(require("../sentry/getTransaction"));
const find = async (query, options, existingTransaction) => {
    var _a, _b;
    const transaction = (0, getTransaction_1.default)({
        name: 'service._default.helpers.runAllMiddleware.find',
        op: 'service.run',
        data: { query }
    }, existingTransaction);
    if ((_b = (_a = options.options) === null || _a === void 0 ? void 0 : _a.middleware) === null || _b === void 0 ? void 0 : _b.find)
        for (const f of options.options.middleware.find)
            await f(query, options);
    transaction.finish();
};
exports.find = find;
const findById = async (id, options, existingTransaction) => {
    var _a, _b;
    const transaction = (0, getTransaction_1.default)({
        name: 'service._default.helpers.runAllMiddleware.findById',
        op: 'service.run',
        data: { id }
    }, existingTransaction);
    if ((_b = (_a = options.options) === null || _a === void 0 ? void 0 : _a.middleware) === null || _b === void 0 ? void 0 : _b.findById)
        for (const f of options.options.middleware.findById)
            await f(id, options);
    transaction.finish();
};
exports.findById = findById;
const findByIdAndUpdate = async (id, item, options, existingTransaction) => {
    var _a, _b;
    const transaction = (0, getTransaction_1.default)({
        name: 'service._default.helpers.runAllMiddleware.findByIdAndUpdate',
        op: 'service.run',
        data: {
            id,
            item,
            middlewareCount: options.options.middleware.findByIdAndUpdate.length
        }
    }, existingTransaction);
    if ((_b = (_a = options.options) === null || _a === void 0 ? void 0 : _a.middleware) === null || _b === void 0 ? void 0 : _b.findByIdAndUpdate)
        for (const f of options.options.middleware.findByIdAndUpdate)
            await f(id, item, options);
    transaction.finish();
};
exports.findByIdAndUpdate = findByIdAndUpdate;
const create = async (item, options, existingTransaction) => {
    var _a, _b;
    const transaction = (0, getTransaction_1.default)({
        name: 'service._default.helpers.runAllMiddleware.create',
        op: 'service.run',
        data: {
            item,
            middlewareCount: options.options.middleware.create.length
        }
    }, existingTransaction);
    if ((_b = (_a = options.options) === null || _a === void 0 ? void 0 : _a.middleware) === null || _b === void 0 ? void 0 : _b.create)
        for (const f of options.options.middleware.create) {
            await f(item, options);
        }
    transaction.finish();
};
exports.create = create;
exports.default = {
    find,
    findById,
    findByIdAndUpdate,
    create
};
//# sourceMappingURL=service._default.helpers.runAllMiddleware.js.map