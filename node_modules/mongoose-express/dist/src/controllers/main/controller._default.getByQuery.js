"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const controller_errorHandler_1 = __importDefault(require("../error/controller.errorHandler"));
const service__default_getByQuery_1 = __importDefault(require("../../services/main/service._default.getByQuery"));
const wrapperFindOptions_1 = __importDefault(require("../../classes/wrapperFindOptions"));
const service_addMongoBouncerOptsToOptions_1 = __importDefault(require("../../services/wrapper/service.addMongoBouncerOptsToOptions"));
const service_getQueryFromReqQuery_1 = __importDefault(require("../../services/wrapper/service.getQueryFromReqQuery"));
const service__default_helpers_runAllPostprocessing_1 = __importDefault(require("../../services/main/service._default.helpers.runAllPostprocessing"));
const getTransaction_1 = __importDefault(require("../../services/sentry/getTransaction"));
const addTags_Route_1 = __importDefault(require("../../services/sentry/addTags.Route"));
const errorWithCode_1 = require("../../classes/errorWithCode");
exports.default = (model, options = {}, getByQuery = service__default_getByQuery_1.default, errorHandler = controller_errorHandler_1.default) => async (req, res) => {
    const transaction = (0, getTransaction_1.default)({
        name: 'controller._default.getByQuery',
        op: 'controller',
        tags: (0, addTags_Route_1.default)(req)
    }, undefined, true);
    const opts = new wrapperFindOptions_1.default(options);
    try {
        (0, service_addMongoBouncerOptsToOptions_1.default)(req, opts);
        if (opts.options.paramsForQuery.length === 0)
            return errorHandler(new errorWithCode_1.ErrorInternalServerError({ msg: 'query parameters for this endpoint not configured' }), res);
        const query = (0, service_getQueryFromReqQuery_1.default)(req.query, opts);
        const objects = await getByQuery(model, opts, transaction)(query);
        if (!objects)
            return errorHandler(new errorWithCode_1.ErrorDocumentNotFound({ msg: `The Document of Type ${model.name} with the id: ${req.params.id} could not be found` }), res);
        await service__default_helpers_runAllPostprocessing_1.default.find(objects, query, opts, transaction);
        return res.status(200).json(objects);
    }
    catch (err) {
        return errorHandler(err, res);
    }
    finally {
        transaction.finish;
    }
};
//# sourceMappingURL=controller._default.getByQuery.js.map