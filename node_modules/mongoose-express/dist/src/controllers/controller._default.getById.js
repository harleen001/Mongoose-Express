"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const controller_errorHandler_1 = __importDefault(require("./errors/controller.errorHandler"));
const service__default_getById_1 = __importDefault(require("@/services/dbConnection/service._default.getById"));
const interface_wrapperFindByIdOptions_1 = __importDefault(require("@/interfaces/wrapperOptions/interface.wrapperFindByIdOptions"));
const service_errors_1 = __importDefault(require("@/services/error/service.errors"));
const service_addMongoBouncerOptsToOptions_1 = __importDefault(require("@/services/misc/service.addMongoBouncerOptsToOptions"));
const service__default_helpers_runAllPostprocessing_1 = __importDefault(require("@/services/dbConnection/service._default.helpers.runAllPostprocessing"));
const getTransaction_1 = __importDefault(require("@/services/sentry/getTransaction"));
const addTags_Route_1 = __importDefault(require("@/services/sentry/addTags.Route"));
exports.default = (model, options = {}, getById = service__default_getById_1.default, errorHandler = controller_errorHandler_1.default) => async (req, res) => {
    const transaction = (0, getTransaction_1.default)({
        name: 'controller._default.getById',
        op: 'controller',
        tags: (0, addTags_Route_1.default)(req)
    }, undefined, true);
    try {
        const id = req.params.id;
        const opts = new interface_wrapperFindByIdOptions_1.default(options);
        (0, service_addMongoBouncerOptsToOptions_1.default)(req, opts);
        const object = await getById(model, opts, transaction)(id);
        if (!object)
            return errorHandler(service_errors_1.default.documentNotFound({ msg: `The Document of Type ${model.name} with the id: ${req.params.id} could not be found` }), res);
        await service__default_helpers_runAllPostprocessing_1.default.findById(object, id, opts, transaction);
        return res.status(200).json(object);
    }
    catch (err) {
        return errorHandler(err, res);
    }
    finally {
        transaction.finish();
    }
};
//# sourceMappingURL=controller._default.getById.js.map