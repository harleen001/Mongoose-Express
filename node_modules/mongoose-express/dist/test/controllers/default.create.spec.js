"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const service_mongodbConnector_1 = __importStar(require("../../src/services/mongodb/service.mongodbConnector"));
const mongodb_memory_server_1 = require("mongodb-memory-server");
const express_1 = __importDefault(require("express"));
const controller__default_create_1 = __importDefault(require("../../src/controllers/main/controller._default.create"));
const models_1 = require("../helpers/models");
const routeTester_1 = __importDefault(require("../helpers/routeTester"));
const sinon_1 = __importDefault(require("sinon"));
const errorWithCode_1 = require("../../src/classes/errorWithCode");
const query_bouncer_mongoose_plugin_1 = require("query-bouncer-mongoose-plugin");
const config_mongoBouncer_1 = __importDefault(require("../../src/configs/config.mongoBouncer"));
describe('controller.default.create', () => {
    let mongodb;
    let qBouncer;
    before(async () => {
        mongodb = await mongodb_memory_server_1.MongoMemoryServer.create({
            instance: { port: 38123 }
        });
        const uri = mongodb.getUri();
        await (0, service_mongodbConnector_1.connect)(uri, service_mongodbConnector_1.default);
    });
    beforeEach(() => {
        qBouncer = new query_bouncer_mongoose_plugin_1.MockAdapter(config_mongoBouncer_1.default);
    });
    afterEach(async () => {
        await service_mongodbConnector_1.default.connection.dropDatabase();
    });
    after(() => {
        service_mongodbConnector_1.default.connection.close();
        mongodb.stop();
    });
    it.only('will correctly make a basic document creation', async () => {
        // Prepare
        const router = express_1.default
            .Router()
            .post('/', (0, controller__default_create_1.default)(models_1.minimalModel));
        const routeTest = new routeTester_1.default(router, {
            body: {
                firstName: 'Meat',
                lastName: 'Loaf'
            }
        });
        // Execute
        await routeTest.execute({
            method: 'POST',
            url: '/',
        });
        // Assert
        sinon_1.default.assert.calledOnce(routeTest.res.json);
        sinon_1.default.assert.calledOnceWithMatch(routeTest.res.json, {
            firstName: 'Meat',
            lastName: 'Loaf'
        });
    });
    it('will return with the correct error if a mandatory field is missing', async () => {
        // Prepare
        const router = express_1.default
            .Router()
            .post('/', (0, controller__default_create_1.default)(models_1.minimalModel, {}));
        const routeTest = new routeTester_1.default(router, {
            body: {
                firstName: 'Meat',
            }
        });
        // Execute
        await routeTest.execute({
            method: 'POST',
            url: '/',
        });
        // Assert
        sinon_1.default.assert.calledWith(routeTest.res.status, 400);
        sinon_1.default.assert.calledOnce(routeTest.res.json);
        sinon_1.default.assert.calledWithMatch(routeTest.res.json, new errorWithCode_1.ErrorValidationFailed());
    });
    it.only('will correctly utilize the mongo-bouncer', async () => {
        // Prepare
        const router = express_1.default
            .Router()
            .post('/', (0, controller__default_create_1.default)(models_1.minimalModelQBouncer, {
            useMongoBouncer: true
        }));
        qBouncer.mock({
            collection: 'protected_people',
            right: 'create',
            response: { forbidden: true }
        });
        const routeTest = new routeTester_1.default(router, {
            body: {
                firstName: 'Meat',
                lastName: 'Loaf'
            }
        });
        // Execute
        await routeTest.execute({
            method: 'POST',
            url: '/',
        });
        // Assert
        sinon_1.default.assert.calledWith(routeTest.res.status, 403);
    });
});
//# sourceMappingURL=default.create.spec.js.map