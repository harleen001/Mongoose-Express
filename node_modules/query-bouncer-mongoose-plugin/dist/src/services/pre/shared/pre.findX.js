"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const removeAuthorizerOptions_1 = __importDefault(require("../../removeAuthorizerOptions"));
const bouncerIsActivated_1 = __importDefault(require("../../bouncerIsActivated"));
const extractCookieOrJWTAndReturnHeader_1 = __importDefault(require("../../extractCookieOrJWTAndReturnHeader"));
const class_OperationOptions_1 = __importDefault(require("../../../classes/class.OperationOptions"));
const preFind = async (schema, config, operation) => {
    schema.pre(operation, async function () {
        const self = this;
        const options = new class_OperationOptions_1.default(self.options);
        if ((0, bouncerIsActivated_1.default)(options)) {
            const axios = config.axios;
            const collection = self._collection.collectionName;
            const right = ['find', 'findOne'].some(o => o === operation) ? 'read' : 'delete';
            const query = self.getFilter();
            try {
                const headers = (0, extractCookieOrJWTAndReturnHeader_1.default)(options, config);
                (0, removeAuthorizerOptions_1.default)(self);
                const newQuery = (await axios.put(`/${collection}/${right}`, { query }, { headers })).data.query;
                self.setQuery(newQuery);
            }
            catch (err) {
                throw err;
            }
        }
    });
};
exports.default = preFind;
//# sourceMappingURL=pre.findX.js.map