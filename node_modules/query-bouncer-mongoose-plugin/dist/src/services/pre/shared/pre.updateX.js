"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const removeAuthorizerOptions_1 = __importDefault(require("../../removeAuthorizerOptions"));
const bouncerIsActivated_1 = __importDefault(require("../../bouncerIsActivated"));
const extractCookieOrJWTAndReturnHeader_1 = __importDefault(require("../..//extractCookieOrJWTAndReturnHeader"));
const class_OperationOptions_1 = __importDefault(require("../../../classes/class.OperationOptions"));
const preUpdateX = async (schema, config, operation) => {
    schema.pre(operation, async function () {
        var _a;
        const self = this;
        const options = new class_OperationOptions_1.default(self.options);
        if ((0, bouncerIsActivated_1.default)(options)) {
            const axios = config.axios;
            const collection = self._collection.collectionName;
            const right = 'update';
            const query = self._conditions;
            const payload = self._update;
            delete payload._id;
            try {
                const headers = (0, extractCookieOrJWTAndReturnHeader_1.default)(options, config);
                (0, removeAuthorizerOptions_1.default)(this);
                const newQuery = (await axios.put(`/${collection}/${right}`, { payload, query }, { headers })).data.query;
                this.setQuery(newQuery);
            }
            catch (err) {
                if (((_a = err.response) === null || _a === void 0 ? void 0 : _a.code) === 403)
                    throw new Error('preUpdate: User does not have Permission to Update');
                throw err;
            }
        }
    });
};
exports.default = preUpdateX;
//# sourceMappingURL=pre.updateX.js.map