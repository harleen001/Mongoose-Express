import { Request } from 'express';
import mongodb = require('mongodb');
interface MongoBouncerOptions {
    Request?: Request;
    Disabled?: boolean;
}
declare module 'mongoose' {
    interface SaveOptions {
        MongoBouncer?: MongoBouncerOptions;
    }
    interface QueryFindOneAndUpdateOptions {
        MongoBouncer?: MongoBouncerOptions;
    }
    interface QueryFindBaseOptions {
        MongoBouncer?: MongoBouncerOptions;
    }
    interface ModelUpdateOptions {
        MongoBouncer?: MongoBouncerOptions;
    }
    interface ModelRemoveOptions {
        MongoBouncer?: MongoBouncerOptions;
    }
    interface QueryFindOneAndRemoveOptions {
        MongoBouncer?: MongoBouncerOptions;
    }
    interface QueryFindOptions {
        MongoBouncer?: MongoBouncerOptions;
    }
    interface ModelOptions {
        MongoBouncer?: MongoBouncerOptions;
    }
    interface SimpleQuery<ResultType, DocType> extends Query<ResultType, DocType> {
        _collection: Collection;
    }
    interface InternalCache {
        saveOptions: ModelOptions;
        _id: mongodb.ObjectID;
    }
    interface Document {
        $__: InternalCache;
    }
    type DeleteManyQuery<T> = SimpleQuery<mongodb.DeleteWriteOpResultObject['result'] & {
        deletedCount?: number;
    }, T>;
    type RemoveQuery<T> = SimpleQuery<mongodb.DeleteWriteOpResultObject['result'] & {
        deletedCount?: number;
    }, T>;
    type ReplaceOneQuery<T> = SimpleQuery<any, T>;
    interface Model<T = any> {
        deleteMany(conditions: any, options: ModelOptions, callback?: (err: any) => void): DeleteManyQuery<T>;
        remove(criteria: any | SimpleQuery<T, any>, options: ModelOptions, callback?: (err: any) => void): RemoveQuery<T>;
        replaceOne(conditions: any, replacement: any, options: ModelOptions, callback?: (err: any, raw: any) => void): ReplaceOneQuery<T>;
    }
}
export {};
