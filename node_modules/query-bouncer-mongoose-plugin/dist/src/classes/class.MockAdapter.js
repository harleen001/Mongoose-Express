"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const axios_mock_adapter_1 = __importDefault(require("axios-mock-adapter"));
class MockAdapter {
    constructor(config) {
        this.requestsMade = 0;
        // this.schema;
        // this.queryBouncerPlugin = this.findPlugin(originalOpts);
        const _axios = axios_1.default.create({ baseURL: 'http://mock-adapter.local' });
        this.mockAdapter = new axios_mock_adapter_1.default(_axios);
        config.axios = _axios;
        config.baseUrl = 'http://mock-adapter.local';
        this.config = config;
    }
    getResponse(opts) {
        this.requestsMade++;
        if (Array.isArray(opts.response))
            return opts.response[this.requestsMade];
        return opts.response || {};
    }
    mock(opts) {
        const response = this.getResponse(opts);
        switch (opts.right) {
            case 'read':
            case 'update':
            case 'delete':
                this.mockAdapter.onPut(`/${opts.collection}/${opts.right}`).reply(config => response.forbidden
                    ? [403, {}]
                    : [200, {
                            query: Object.assign(JSON.parse(config.data).query, response.query),
                        }]);
                break;
            case 'create':
                this.mockAdapter.onPut(`/${opts.collection}/${opts.right}`).reply(_ => response.forbidden
                    ? [403, {}]
                    : [200, {}]);
                break;
        }
    }
    clearMocks() {
        this.mockAdapter.reset();
    }
}
exports.default = MockAdapter;
//# sourceMappingURL=class.MockAdapter.js.map