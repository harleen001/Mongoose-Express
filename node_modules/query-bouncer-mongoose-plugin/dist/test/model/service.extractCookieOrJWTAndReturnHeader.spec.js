"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const extractCookieOrJWTAndReturnHeader_1 = __importDefault(require("../../src/services/extractCookieOrJWTAndReturnHeader"));
const class_QbConfig_1 = __importDefault(require("../../src/classes/class.QbConfig"));
const chai_1 = require("chai");
const class_OperationOptions_1 = __importDefault(require("../../src/classes/class.OperationOptions"));
describe('service.extractCookieOrJWTAndReturnHeader', () => {
    const validConfig = new class_QbConfig_1.default({});
    it('will return header with just cookie if present', () => {
        // Prepare 
        const Request = {
            cookies: { 'connect.sid': '1234.1234' }
        };
        const options = new class_OperationOptions_1.default({
            MongoBouncer: { Request }
        });
        // Execute
        const headers = (0, extractCookieOrJWTAndReturnHeader_1.default)(options, validConfig);
        // Assert
        (0, chai_1.expect)(headers).to.deep.equal({
            cookie: 'connect.sid=1234.1234'
        });
    });
    it('will return header with jwt if just jwt present', () => {
        const Request = {
            headers: {
                authorization: 'Bearer 12345.6789.01234'
            }
        };
        const options = new class_OperationOptions_1.default({
            MongoBouncer: { Request }
        });
        // Execute
        const headers = (0, extractCookieOrJWTAndReturnHeader_1.default)(options, validConfig);
        // Assert
        (0, chai_1.expect)(headers).to.deep.equal({
            authorization: 'Bearer 12345.6789.01234'
        });
    });
    it('will return jwt if both are present', () => {
        const Request = {
            headers: {
                authorization: 'Bearer 12345.6789.01234'
            },
            cookies: { 'connect.sid': '1234.1234' }
        };
        const options = new class_OperationOptions_1.default({
            MongoBouncer: { Request }
        });
        // Execute
        const headers = (0, extractCookieOrJWTAndReturnHeader_1.default)(options, validConfig);
        // Assert
        (0, chai_1.expect)(headers).to.deep.equal({
            authorization: 'Bearer 12345.6789.01234',
        });
    });
    it('will not throw, but leave the headers empty if neither cookie nor jwt present', () => {
        const Request = {
            Request: { headers: {},
                cookies: {}
            }
        };
        const options = {
            MongoBouncer: { Request, Disabled: false, }
        };
        // Execute
        const headers = (0, extractCookieOrJWTAndReturnHeader_1.default)(options, validConfig);
        // Assert
        (0, chai_1.expect)(headers).to.deep.equal({});
        (0, chai_1.expect)(() => (0, extractCookieOrJWTAndReturnHeader_1.default)(options, validConfig)).not.to.throw;
    });
});
//# sourceMappingURL=service.extractCookieOrJWTAndReturnHeader.spec.js.map