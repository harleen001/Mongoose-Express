"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = require("mongoose");
const mongodb_memory_server_1 = require("mongodb-memory-server");
const chai_1 = __importStar(require("chai"));
const chai_exclude_1 = __importDefault(require("chai-exclude"));
const axios_1 = __importDefault(require("axios"));
const axios_mock_adapter_1 = __importDefault(require("axios-mock-adapter"));
const index_1 = __importDefault(require("../../src/index"));
chai_1.default.use(chai_exclude_1.default);
describe('update', () => {
    let mongodb;
    let BlogPost;
    let mongoose;
    let mock;
    const MongoBouncer = {
        Request: {
            cookies: { 'connect.sid': 'connect.sid=myCookie' }
        }
    };
    before(async () => {
        mongoose = new mongoose_1.Mongoose();
        mongodb = new mongodb_memory_server_1.MongoMemoryServer();
        mongoose.plugin(index_1.default, { axios: axios_1.default });
        await mongoose.connect(await mongodb.getUri(), {});
        const BlogPostSchema = new mongoose_1.Schema({
            Title: { type: String, required: true },
            Description: { type: String },
            Category: { type: String, required: true }
        });
        BlogPost = mongoose.model('blogpost', BlogPostSchema);
    });
    beforeEach(async () => {
        mock = new axios_mock_adapter_1.default(axios_1.default);
        await BlogPost.insertMany([
            { Title: 'New Food', Description: 'Stuff about super food', Category: 'Food' },
            { Title: 'Cars are great', Description: 'True Story', Category: 'Cars' },
            { Title: 'A Cat named Foo', Description: 'A Story about a Cat', Category: 'Animals' },
            { Title: 'Cars are still great', Description: 'Another true Story', Category: 'Cars' },
            { Title: 'Cars are great', Description: 'Another true Story', Category: 'Misc' },
        ]);
    });
    it('will correctly update only the Blogpost with the Category the user has access to', async () => {
        // Prepare
        const originalQuery = { Title: 'Cars are great' };
        const originalPayload = { Title: 'A new BlogPost', Category: 'Cars' };
        mock.onPut('/blogposts/update').reply(200, {
            query: {
                Title: 'Cars are great',
                $or: [{ Category: 'Cars' }]
            },
            payload: originalPayload
        });
        // Execute
        const blogPost = await BlogPost.update(originalQuery, originalPayload, { MongoBouncer });
        // Assert
        (0, chai_1.expect)(blogPost).to.deep.equal({
            acknowledged: true,
            matchedCount: 1,
            modifiedCount: 1,
            upsertedCount: 0,
            upsertedId: null
        });
    });
    it('will not modify anything if the user does not have access', async () => {
        const originalQuery = { Title: 'A Cat named Foo' };
        const originalPayload = {
            Title: 'A Cat Named Bar',
            Category: 'Cars'
        };
        mock.onPut('/blogposts/update').reply(200, {
            query: {
                Title: 'A Cat named Foo',
                $or: [{ Category: 'Cars' }]
            }
        });
        // Execute
        const blogPost = await BlogPost.update(originalQuery, originalPayload, { MongoBouncer });
        // Assert
        (0, chai_1.expect)(blogPost).to.deep.equal({
            acknowledged: true,
            matchedCount: 0,
            modifiedCount: 0,
            upsertedCount: 0,
            upsertedId: null
        });
    });
    afterEach(async () => {
        mock.restore();
        await mongoose.connection.dropDatabase();
    });
});
//# sourceMappingURL=update.spec.js.map