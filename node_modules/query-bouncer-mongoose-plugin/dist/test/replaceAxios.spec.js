"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
const sinon_1 = __importDefault(require("sinon"));
const referee_1 = __importDefault(require("@sinonjs/referee"));
const class_QbConfig_1 = __importDefault(require("../src/classes/class.QbConfig"));
const mongodb_memory_server_1 = require("mongodb-memory-server");
const mongoose_1 = __importStar(require("mongoose"));
const chai_1 = require("chai");
const index_2 = __importDefault(require("../index"));
const assert = referee_1.default.assert;
async function connect(connectionString, mongoose) {
    return new Promise((res, rej) => {
        console.log('Connecting to ' + connectionString);
        mongoose.connect(connectionString, {}, () => {
            res();
        });
    });
}
describe('replace Axios', () => {
    let mongodb;
    let mymodel;
    let config;
    before(async () => {
        mongodb = new mongodb_memory_server_1.MongoMemoryServer();
        const uri = await mongodb.getUri();
        await connect(uri, mongoose_1.default);
        const schema = new mongoose_1.Schema({
            Value: String,
            Category: String,
        });
        config = new class_QbConfig_1.default({});
        schema.plugin(index_2.default, config);
        mymodel = mongoose_1.default.model('test', schema);
    });
    beforeEach(async () => {
        mymodel.create([
            { Value: 'Should be returned', Category: 'cat1' },
            { Value: 'Should not be returned', Category: 'cat2' },
        ]);
    });
    afterEach(async () => {
        await mongoose_1.default.connection.dropDatabase();
    });
    after(() => {
        mongoose_1.default.connection.close();
    });
    it('the mock adapter will mock axios requests', async () => {
        // Prepare
        const qBouncer = new index_1.MockAdapter(config);
        const spy = sinon_1.default.spy(config.axios, 'put');
        qBouncer.mock({
            collection: mymodel.collection.collectionName,
            right: 'read',
            response: {
                query: { $or: [{ Category: 'cat1' }] }
            }
        });
        // Execute
        const results = await mymodel.find({}, null, {
            MongoBouncer: {
                Request: {}
            }
        });
        // Assert
        (0, chai_1.expect)(results.length).to.equal(1);
        assert(spy.calledOnce);
    });
});
//# sourceMappingURL=replaceAxios.spec.js.map